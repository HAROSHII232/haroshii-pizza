"use server";

import { prisma } from "@/prisma/prisma-client";
import { CheckoutFormValues, PayOrderTemplate } from "@/shared/components";
import { sendEmail } from "@/shared/lib";
import { OrderStatus } from "@prisma/client";
import { cookies } from "next/headers";

export async function createOrder(data: CheckoutFormValues) {
  try {
    const cookieStore = cookies();
    const cartToken = cookieStore.get("cartToken")?.value;

    if (!cartToken) {
      throw new Error("Cart token not found");
    }

    /* –ù–∞—Ö–æ–¥–∏–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ —Ç–æ–∫–µ–Ω—É */
    const userCart = await prisma.cart.findFirst({
      where: {
        token: cartToken,
      },
      include: {
        user: true,
        items: {
          include: {
            ingredients: true,
            productItem: {
              include: {
                product: true,
              },
            },
          },
        },
      },
    });

    /* –ï—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω–∞ –≤–æ–∑—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É */
    if (!userCart) {
      throw new Error("Cart not found");
    }

    /* –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ */
    const order = await prisma.order.create({
      data: {
        token: cartToken,
        fullName: data.firstName + " " + data.lastName,
        email: data.email,
        phone: data.phone,
        address: data.address,
        comment: data.comment,
        totalAmount: userCart.totalAmount,
        status: OrderStatus.PENDING,
        items: JSON.stringify(userCart.items),
      },
    });

    /* –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É */
    await prisma.cart.update({
      where: {
        id: userCart.id,
      },
      data: {
        totalAmount: 0,
      },
    });

    await prisma.cartItem.deleteMany({
      where: {
        cartId: userCart.id,
      },
    });

    /* –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞ */
    await sendEmail(
      data.email,
      "üçï HAROSHII Pizza üçï / –û–ø–ª–∞—Ç–∏—Ç–µ –∑–∞–∫–∞–∑ #" + order.id,
      PayOrderTemplate({
        orderId: order.id,
        totalAmount: order.totalAmount,
        paymentUrl: `https://learn.javascript.ru/`,
      })
    );
  } catch (error) {
    console.error("[CreateOrder] Server error", error);
  }
}
